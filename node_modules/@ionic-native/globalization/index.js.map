{"version":3,"sources":["../../../src/@ionic-native/plugins/globalization/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n/**\r\n * @name Globalization\r\n * @description\r\n * @usage\r\n * ```typescript\r\n * import { Globalization } from '@ionic-native/globalization';\r\n *\r\n * constructor(private globalization: Globalization) { }\r\n *\r\n *\r\n * ...\r\n *\r\n *\r\n * this.globalization.getPreferredLanguage()\r\n *   .then(res => console.log(res))\r\n *   .catch(e => console.log(e));\r\n *\r\n *\r\n * ```\r\n */\r\n@Plugin({\r\n  pluginName: 'Globalization',\r\n  plugin: 'cordova-plugin-globalization',\r\n  pluginRef: 'navigator.globalization',\r\n  repo: 'https://github.com/apache/cordova-plugin-globalization',\r\n  platforms: ['Amazon Fire OS', 'Android', 'BlackBerry 10', 'Browser', 'Firefox OS', 'iOS', 'Tizen', 'Ubuntu', 'Windows', 'Windows Phone']\r\n})\r\n\r\nexport class Globalization extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Returns the BCP-47 compliant language identifier tag to the successCallback with a properties object as a parameter. That object should have a value property with a String value.\r\n   * @returns {Promise<{value: string}>}\r\n   */\r\n  @Cordova()\r\n  getPreferredLanguage(): Promise<{ value: string }> { return; }\r\n\r\n  /**\r\n   * Returns the BCP 47 compliant locale identifier string to the successCallback with a properties object as a parameter.\r\n   * @returns {Promise<{value: string}>}\r\n   */\r\n  @Cordova()\r\n  getLocaleName(): Promise<{ value: string }> { return; }\r\n\r\n  /**\r\n   * Converts date to string\r\n   * @param {Date} date Date you wish to convert\r\n   * @param options Options for the converted date. Length, selector.\r\n   * @returns {Promise<{value: string}>} Returns a promise when the date has been converted.\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  dateToString(date: Date, options: { formatLength: string, selector: string }): Promise<{ value: string }> { return; }\r\n\r\n  /**\r\n   * Parses a date formatted as a string, according to the client's user preferences and calendar using the time zone of the client, and returns the corresponding date object.\r\n   * @param {string} dateString Date as a string to be converted\r\n   * @param options Options for the converted date. Length, selector.\r\n   * @returns {Promise<{ year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number }>} Returns a promise when the date has been converted.\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  stringToDate(dateString: string, options: { formatLength: string, selector: string }): Promise<{ year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number }> { return; }\r\n\r\n  /**\r\n   * Returns a pattern string to format and parse dates according to the client's user preferences.\r\n   * @param options Object with the format length and selector\r\n   * @returns {Promise<{ pattern: string, timezone: string, utf_offset: number, dst_offset: number }>} Returns a promise.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  getDatePattern(options: { formatLength: string, selector: string }): Promise<{ pattern: string, timezone: string, utf_offset: number, dst_offset: number }> { return; }\r\n\r\n  /**\r\n   * Returns an array of the names of the months or days of the week, depending on the client's user preferences and calendar.\r\n   * @param options Object with type (narrow or wide) and item (month or days).\r\n   * @returns {Promise<{value: Array<string>}>} Returns a promise.\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  getDateNames(options: { type: string, item: string }): Promise<{ value: Array<string> }> { return; }\r\n\r\n  /**\r\n   * Indicates whether daylight savings time is in effect for a given date using the client's time zone and calendar.\r\n   * @param {data} date Date to process\r\n   * @returns {Promise<{dst: string}>} reutrns a promise with the value\r\n   */\r\n  @Cordova()\r\n  isDayLightSavingsTime(date: Date): Promise<{ dst: string }> { return; }\r\n\r\n  /**\r\n   * Returns the first day of the week according to the client's user preferences and calendar.\r\n   * @returns {Promise<{value: string}>} returns a promise with the value\r\n   */\r\n  @Cordova()\r\n  getFirstDayOfWeek(): Promise<{ value: string }> { return; }\r\n\r\n  /**\r\n   * Returns a number formatted as a string according to the client's user preferences.\r\n   * @param numberToConvert {Number} The number to convert\r\n   * @param options {Object} Object with property `type` that can be set to: decimal, percent, or currency.\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  numberToString(numberToConvert: number, options: { type: string }): Promise<{ value: string }> { return; }\r\n\r\n  /**\r\n   *\r\n   * @param {string} stringToConvert String you want to conver to a number\r\n   * @param options  The type of number you want to return. Can be decimal, percent, or currency.\r\n   * @returns {Promise<{ value: number | string }>} Returns a promise with the value.\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 2\r\n  })\r\n  stringToNumber(stringToConvert: string, options: { type: string }): Promise<{ value: number | string }> { return; }\r\n\r\n  /**\r\n   * Returns a pattern string to format and parse numbers according to the client's user preferences.\r\n   * @param options Can be decimal, percent, or currency.\r\n   * @returns {Promise<{ pattern: string, symbol: string, fraction: number, rounding: number, positive: string, negative: string, decimal: string, grouping: string }>}\r\n   */\r\n  @Cordova({\r\n    callbackOrder: 'reverse'\r\n  })\r\n  getNumberPattern(options: { type: string }): Promise<{ pattern: string, symbol: string, fraction: number, rounding: number, positive: string, negative: string, decimal: string, grouping: string }> { return; }\r\n\r\n  /**\r\n   * Returns a pattern string to format and parse currency values according to the client's user preferences and ISO 4217 currency code.\r\n   * @param {string} currencyCode Currency Code.A\r\n   * @returns {Promise<{ pattern: string, code: string, fraction: number, rounding: number, decimal: number, grouping: string }>}\r\n   */\r\n  @Cordova()\r\n  getCurrencyPattern(currencyCode: string): Promise<{ pattern: string, code: string, fraction: number, rounding: number, decimal: number, grouping: string }> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
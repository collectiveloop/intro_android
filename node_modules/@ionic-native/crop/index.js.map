{"version":3,"sources":["../../../src/@ionic-native/plugins/crop/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;GAiBG;AASH,IAAa,IAAI;IAAS,wBAAiB;IAA3C;;IAmBA,CAAC;IAjBC;;;;;OAKG;IAIH,mBAAI,GAAJ,UAAK,WAAmB,EAAE,OAA6B,IAAqB,MAAM,CAAC,CAAC,CAAC;IAQvF,WAAC;AAAD,CAnBA,AAmBC,CAnByB,iBAAiB,GAmB1C;AANM,eAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,mBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAPA;IAHC,OAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;gCACmF;AAX1E,IAAI;IARhB,MAAM,CAAC;QACN,UAAU,EAAE,MAAM;QAClB,MAAM,EAAE,qBAAqB;QAC7B,SAAS,EAAE,SAAS;QACpB,IAAI,EAAE,+CAA+C;QACrD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,IAAI,CAmBhB;SAnBY,IAAI","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @name Crop\n * @description Crops images\n * @usage\n * ```typescript\n * import { Crop } from '@ionic-native/crop';\n *\n * constructor(private crop: Crop) { }\n *\n * ...\n *\n * this.crop.crop('path/to/image.jpg', {quality: 75})\n *   .then(\n *     newImage => console.log('new image path is: ' + newImage),\n *     error => console.error('Error cropping image', error)\n *   );\n * ```\n */\n@Plugin({\n  pluginName: 'Crop',\n  plugin: 'cordova-plugin-crop',\n  pluginRef: 'plugins',\n  repo: 'https://github.com/jeduan/cordova-plugin-crop',\n  platforms: ['Android', 'iOS']\n})\n\nexport class Crop extends IonicNativePlugin {\n\n  /**\n   * Crops an image\n   * @param pathToImage\n   * @param options\n   * @returns {Promise<string>} Returns a promise that resolves with the new image path, or rejects if failed to crop.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  crop(pathToImage: string, options?: { quality: number }): Promise<string> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}